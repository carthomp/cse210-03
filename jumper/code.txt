Word:

import csv
import random

       
class Word:

    def _init_(self):     
        self._word_list = []
        self._word = ""
               
    def set_word (self):
        return self._word

    def pick_word(self):
        with open ("jumper\words.csv") as csv_file:
            reader = csv.reader(csv_file)
            self._word_list = list(reader)
            for row in reader:
                self._word_list.append(row)

            random_word_number = random.randint(0,len(self._word_list))
            self._word = self._word_list[random_word_number]
 
 
 Terminal:
 class Terminal_Service():
    """
    """

    def __init__(self):
        """
        """
        self.guessed_letters = []
        self.incomplete_word = []

    def welcome(self):
        """
        Displays a welcome message here!
        """
        print("Welcome to the Jumper game!")
    
    def display_line(self):
        print("-----------------------------------------------------\n")
    
    # def fill_incomplete_word(self, word):
    #     for i in range(len(word)):
    #         self.incomplete_word.append('_')
    #     print(f"This game, your word has {len(self.incomplete_word)} letters! Good luck!")

    def take_guess(self):
        """
        Prompts the user to enter a letter, and avoids common errors such as repeated guesses
        """
        guess = input("Enter a letter: ")
        try_again = True
        while try_again:
            if len(guess) > 1:
                print("Please enter only one letter!")
                guess = input("Enter a letter: ")
                try_again = True
            elif guess in self.guessed_letters:
                print(f"You have already guessed the letter {guess}!")
                guess = input("Enter a letter: ")
                try_again = True
            else:
                try_again = False
                self.guessed_letters.append(guess)
        return guess

    def compare_guess(self, word, guess):
        # correct = False
        # index = 0
        # for character in word:
        #     if character == guess:
        #         correct = True
        #         self.incomplete_word[index] = guess
        #     index += 1
        # if correct:
        #     print("Good guess!")
        #     return True
        # else:
        #     print("Wrong guess!")
        #     return False
        if guess in list(word):
            print("Good guess!")
            return True
        else:
            print("Wrong guess!")
            return False
    def display_parachute(self, parachute):
        print(parachute)
    
    # def display_incomplete_word(self):
    #     for i in range(len(self.incomplete_word)):
    #         print(self.incomplete_word[i], end=" ")
    #     print()
    
    # def check_word_complete(self):
    #     for i in range(len(self.incomplete_word)):
    #         if self.incomplete_word[i] == "_":
    #             return False
    #     return True

    # s

        # if guesses == 0:
        #     print('Game Over')
        #     return False
        # elif guesses > 0:
        #     return True


Director:

from jumper.word import Word
from jumper.parachute import Parachute
from jumper.terminal_service import Terminal_Service

class Director():
    """
    """
    def __init__(self):
        """
        """
        self.keep_playing = True
        self.play_again = ""
        self.current_word = Word()
        self.current_parachute = Parachute()
        self.term_service = Terminal_Service()
        self.tries = 0
        self.current_word.pick_word()
        self.word = str(self.current_word.set_word())
        self.word = self.word.replace("['","")
        self.word = self.word.replace("']","")
        self.number_word = len(self.word)
        self.incomplete_word = ""
        
    
    def start_game(self):
        
        self.term_service.welcome()
        self.tries = self.current_parachute.get_tries()
        self.show_incomplete_word()
        parachute = self.get_parachute(self.tries)
        self.term_service.display_parachute(parachute)
        #self.term_service.fill_incomplete_word(self.word)
        #self.get_input()
        self.do_game_loop()
        self.end_game()

    def show_incomplete_word(self):
        
        for _ in range(self.number_word):
            self.incomplete_word = self.incomplete_word + "_"
        print(self.incomplete_word)
        print(self.word)
    
    def get_parachute (self,tries):
        parachute = self.current_parachute.draw(tries)
        return parachute

    def do_game_loop(self):
        """
        """
        while (self.keep_playing):
            guess = self.term_service.take_guess()
            
            guess_status = self.term_service.compare_guess(self.word, guess)
            
            if guess_status:
                for i in range(self.number_word):
                    if guess == list(self.word)[i]:
                        list_letters = list(self.incomplete_word)
                        list_letters[i] = guess
                        self.incomplete_word = "".join(list_letters)
                                                  
            else:
                self.current_parachute.set_tries()

            print(self.incomplete_word)
            tries = self.current_parachute.get_tries()
            parachute = self.get_parachute(tries)
            self.term_service.display_parachute(parachute)  
            if int(tries) == 4 or self.incomplete_word == self.word:
                self.keep_playing = False 
 

    def end_game(self):
        """
        """
        if not self.keep_playing:
          print('Game over!')
          return True